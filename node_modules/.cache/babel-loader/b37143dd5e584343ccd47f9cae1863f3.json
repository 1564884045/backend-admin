{"remainingRequest":"G:\\RQDL\\base\\backend-admin\\node_modules\\babel-loader\\lib\\index.js!G:\\RQDL\\base\\backend-admin\\src\\utils\\validate.js","dependencies":[{"path":"G:\\RQDL\\base\\backend-admin\\src\\utils\\validate.js","mtime":1620715077838},{"path":"G:\\RQDL\\base\\backend-admin\\babel.config.js","mtime":1620715077731},{"path":"G:\\RQDL\\base\\backend-admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"G:\\RQDL\\base\\backend-admin\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LnRvLXN0cmluZy5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy50cmltLmpzIjsKCi8qKg0KICoNCiAqIEBkZXNjcmlwdGlvbiDliKTor7vmmK/lkKbkuLrlpJbpk74NCiAqIEBwYXJhbSBwYXRoDQogKiBAcmV0dXJucyB7Ym9vbGVhbn0NCiAqLwpleHBvcnQgZnVuY3Rpb24gaXNFeHRlcm5hbChwYXRoKSB7CiAgcmV0dXJuIC9eKGh0dHBzPzp8bWFpbHRvOnx0ZWw6KS8udGVzdChwYXRoKTsKfQovKioNCiAqDQogKiBAZGVzY3JpcHRpb24g5qCh6aqM5a+G56CB5piv5ZCm5bCP5LqONuS9jQ0KICogQHBhcmFtIHN0cg0KICogQHJldHVybnMge2Jvb2xlYW59DQogKi8KCmV4cG9ydCBmdW5jdGlvbiBpc1Bhc3N3b3JkKHN0cikgewogIHJldHVybiBzdHIubGVuZ3RoID49IDY7Cn0KLyoqDQogKg0KICogQGRlc2NyaXB0aW9uIOWIpOaWreaYr+WQpuS4uuaVsOWtlw0KICogQHBhcmFtIHZhbHVlDQogKiBAcmV0dXJucyB7Ym9vbGVhbn0NCiAqLwoKZXhwb3J0IGZ1bmN0aW9uIGlzTnVtYmVyKHZhbHVlKSB7CiAgdmFyIHJlZyA9IC9eWzAtOV0qJC87CiAgcmV0dXJuIHJlZy50ZXN0KHZhbHVlKTsKfQovKioNCiAqDQogKiBAZGVzY3JpcHRpb24g5Yik5pat5piv5ZCm5piv5ZCN56ewDQogKiBAcGFyYW0gdmFsdWUNCiAqIEByZXR1cm5zIHtib29sZWFufQ0KICovCgpleHBvcnQgZnVuY3Rpb24gaXNOYW1lKHZhbHVlKSB7CiAgdmFyIHJlZyA9IC9eW1x1NGUwMC1cdTlmYTVhLXpBLVowLTldKyQvOwogIHJldHVybiByZWcudGVzdCh2YWx1ZSk7Cn0KLyoqDQogKg0KICogQGRlc2NyaXB0aW9uIOWIpOaWreaYr+WQpuS4uklQDQogKiBAcGFyYW0gaXANCiAqIEByZXR1cm5zIHtib29sZWFufQ0KICovCgpleHBvcnQgZnVuY3Rpb24gaXNJUChpcCkgewogIHZhciByZWcgPSAvXihcZHsxLDJ9fDFcZFxkfDJbMC00XVxkfDI1WzAtNV0pXC4oXGR7MSwyfXwxXGRcZHwyWzAtNF1cZHwyNVswLTVdKVwuKFxkezEsMn18MVxkXGR8MlswLTRdXGR8MjVbMC01XSlcLihcZHsxLDJ9fDFcZFxkfDJbMC00XVxkfDI1WzAtNV0pJC87CiAgcmV0dXJuIHJlZy50ZXN0KGlwKTsKfQovKioNCiAqDQogKiBAZGVzY3JpcHRpb24g5Yik5pat5piv5ZCm5piv5Lyg57uf572R56uZDQogKiBAcGFyYW0gdXJsDQogKiBAcmV0dXJucyB7Ym9vbGVhbn0NCiAqLwoKZXhwb3J0IGZ1bmN0aW9uIGlzVXJsKHVybCkgewogIHZhciByZWcgPSAvXihodHRwcz98ZnRwKTpcL1wvKFthLXpBLVowLTkuLV0rKDpbYS16QS1aMC05LiYlJC1dKykqQCkqKCgyNVswLTVdfDJbMC00XVswLTldfDFbMC05XXsyfXxbMS05XVswLTldPykoXC4oMjVbMC01XXwyWzAtNF1bMC05XXwxWzAtOV17Mn18WzEtOV0/WzAtOV0pKXszfXwoW2EtekEtWjAtOS1dK1wuKSpbYS16QS1aMC05LV0rXC4oY29tfGVkdXxnb3Z8aW50fG1pbHxuZXR8b3JnfGJpenxhcnBhfGluZm98bmFtZXxwcm98YWVyb3xjb29wfG11c2V1bXxbYS16QS1aXXsyfSkpKDpbMC05XSspKihcLygkfFthLXpBLVowLTkuLD8nXFwrJiUkIz1+Xy1dKykpKiQvOwogIHJldHVybiByZWcudGVzdCh1cmwpOwp9Ci8qKg0KICoNCiAqIEBkZXNjcmlwdGlvbiDliKTmlq3mmK/lkKbmmK/lsI/lhpnlrZfmr40NCiAqIEBwYXJhbSBzdHINCiAqIEByZXR1cm5zIHtib29sZWFufQ0KICovCgpleHBvcnQgZnVuY3Rpb24gaXNMb3dlckNhc2Uoc3RyKSB7CiAgdmFyIHJlZyA9IC9eW2Etel0rJC87CiAgcmV0dXJuIHJlZy50ZXN0KHN0cik7Cn0KLyoqDQogKg0KICogQGRlc2NyaXB0aW9uIOWIpOaWreaYr+WQpuaYr+Wkp+WGmeWtl+avjQ0KICogQHBhcmFtIHN0cg0KICogQHJldHVybnMge2Jvb2xlYW59DQogKi8KCmV4cG9ydCBmdW5jdGlvbiBpc1VwcGVyQ2FzZShzdHIpIHsKICB2YXIgcmVnID0gL15bQS1aXSskLzsKICByZXR1cm4gcmVnLnRlc3Qoc3RyKTsKfQovKioNCiAqDQogKiBAZGVzY3JpcHRpb24g5Yik5pat5piv5ZCm5piv5aSn5YaZ5a2X5q+N5byA5aS0DQogKiBAcGFyYW0gc3RyDQogKiBAcmV0dXJucyB7Ym9vbGVhbn0NCiAqLwoKZXhwb3J0IGZ1bmN0aW9uIGlzQWxwaGFiZXRzKHN0cikgewogIHZhciByZWcgPSAvXltBLVphLXpdKyQvOwogIHJldHVybiByZWcudGVzdChzdHIpOwp9Ci8qKg0KICoNCiAqIEBkZXNjcmlwdGlvbiDliKTmlq3mmK/lkKbmmK/lrZfnrKbkuLINCiAqIEBwYXJhbSBzdHINCiAqIEByZXR1cm5zIHtib29sZWFufQ0KICovCgpleHBvcnQgZnVuY3Rpb24gaXNTdHJpbmcoc3RyKSB7CiAgcmV0dXJuIHR5cGVvZiBzdHIgPT09ICdzdHJpbmcnIHx8IHN0ciBpbnN0YW5jZW9mIFN0cmluZzsKfQovKioNCiAqDQogKiBAZGVzY3JpcHRpb24g5Yik5pat5piv5ZCm5piv5pWw57uEDQogKiBAcGFyYW0gYXJnDQogKiBAcmV0dXJucyB7YXJnIGlzIGFueVtdfGJvb2xlYW59DQogKi8KCmV4cG9ydCBmdW5jdGlvbiBpc0FycmF5KGFyZykgewogIGlmICh0eXBlb2YgQXJyYXkuaXNBcnJheSA9PT0gJ3VuZGVmaW5lZCcpIHsKICAgIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoYXJnKSA9PT0gJ1tvYmplY3QgQXJyYXldJzsKICB9CgogIHJldHVybiBBcnJheS5pc0FycmF5KGFyZyk7Cn0KLyoqDQogKg0KICogQGRlc2NyaXB0aW9uIOWIpOaWreaYr+WQpuaYr+err+WPo+WPtw0KICogQHBhcmFtIHN0cg0KICogQHJldHVybnMge2Jvb2xlYW59DQogKi8KCmV4cG9ydCBmdW5jdGlvbiBpc1BvcnQoc3RyKSB7CiAgdmFyIHJlZyA9IC9eKFswLTldfFsxLTldXGR8WzEtOV1cZHsyfXxbMS05XVxkezN9fFsxLTVdXGR7NH18NlswLTRdXGR7M318NjVbMC00XVxkezJ9fDY1NVswLTJdXGR8NjU1M1swLTVdKSQvOwogIHJldHVybiByZWcudGVzdChzdHIpOwp9Ci8qKg0KICoNCiAqIEBkZXNjcmlwdGlvbiDliKTmlq3mmK/lkKbmmK/miYvmnLrlj7cNCiAqIEBwYXJhbSBzdHINCiAqIEByZXR1cm5zIHtib29sZWFufQ0KICovCgpleHBvcnQgZnVuY3Rpb24gaXNQaG9uZShzdHIpIHsKICB2YXIgcmVnID0gL14xXGR7MTB9JC87CiAgcmV0dXJuIHJlZy50ZXN0KHN0cik7Cn0KLyoqDQogKg0KICogQGRlc2NyaXB0aW9uIOWIpOaWreaYr+WQpuaYr+i6q+S7veivgeWPtyjnrKzkuozku6MpDQogKiBAcGFyYW0gc3RyDQogKiBAcmV0dXJucyB7Ym9vbGVhbn0NCiAqLwoKZXhwb3J0IGZ1bmN0aW9uIGlzSWRDYXJkKHN0cikgewogIHZhciByZWcgPSAvXlsxLTldXGR7NX0oMTh8MTl8KFsyM11cZCkpXGR7Mn0oKDBbMS05XSl8KDEwfDExfDEyKSkoKFswLTJdWzEtOV0pfDEwfDIwfDMwfDMxKVxkezN9WzAtOVh4XSQvOwogIHJldHVybiByZWcudGVzdChzdHIpOwp9Ci8qKg0KICoNCiAqIEBkZXNjcmlwdGlvbiDliKTmlq3mmK/lkKbmmK/pgq7nrrENCiAqIEBwYXJhbSBzdHINCiAqIEByZXR1cm5zIHtib29sZWFufQ0KICovCgpleHBvcnQgZnVuY3Rpb24gaXNFbWFpbChzdHIpIHsKICB2YXIgcmVnID0gL15cdysoWy0rLl1cdyspKkBcdysoWy0uXVx3KykqXC5cdysoWy0uXVx3KykqJC87CiAgcmV0dXJuIHJlZy50ZXN0KHN0cik7Cn0KLyoqDQogKg0KICogQGRlc2NyaXB0aW9uIOWIpOaWreaYr+WQpuS4reaWhw0KICogQHBhcmFtIHN0cg0KICogQHJldHVybnMge2Jvb2xlYW59DQogKi8KCmV4cG9ydCBmdW5jdGlvbiBpc0NoaW5hKHN0cikgewogIHZhciByZWcgPSAvXltcdTRFMDAtXHU5RkE1XXsyLDR9JC87CiAgcmV0dXJuIHJlZy50ZXN0KHN0cik7Cn0KLyoqDQogKg0KICogQGRlc2NyaXB0aW9uIOWIpOaWreaYr+WQpuS4uuepug0KICogQHBhcmFtIHN0cg0KICogQHJldHVybnMge2Jvb2xlYW59DQogKi8KCmV4cG9ydCBmdW5jdGlvbiBpc0JsYW5rKHN0cikgewogIHJldHVybiBzdHIgPT0gbnVsbCB8fCB1bmRlZmluZWQgfHwgZmFsc2UgfHwgc3RyID09PSAnJyB8fCBzdHIudHJpbSgpID09PSAnJyB8fCBzdHIudG9Mb2NhbGVMb3dlckNhc2UoKS50cmltKCkgPT09ICdudWxsJzsKfQovKioNCiAqDQogKiBAZGVzY3JpcHRpb24g5Yik5pat5piv5ZCm5Li65Zu66K+dDQogKiBAcGFyYW0gc3RyDQogKiBAcmV0dXJucyB7Ym9vbGVhbn0NCiAqLwoKZXhwb3J0IGZ1bmN0aW9uIGlzVGVsKHN0cikgewogIHZhciByZWcgPSAvXig0MDB8ODAwKShbMC05XFwtXXs3LDEwfSl8KChbMC05XXs0fXxbMC05XXszfSkoLXwgKT8pPyhbMC05XXs3LDh9KSgoLXwgfOi9rCkqKFswLTldezEsNH0pKT8kLzsKICByZXR1cm4gcmVnLnRlc3Qoc3RyKTsKfQovKioNCiAqDQogKiBAZGVzY3JpcHRpb24g5Yik5pat5piv5ZCm5Li65pWw5a2X5LiU5pyA5aSa5Lik5L2N5bCP5pWwDQogKiBAcGFyYW0gc3RyDQogKiBAcmV0dXJucyB7Ym9vbGVhbn0NCiAqLwoKZXhwb3J0IGZ1bmN0aW9uIGlzTnVtKHN0cikgewogIHZhciByZWcgPSAvXlxkKyhcLlxkezEsMn0pPyQvOwogIHJldHVybiByZWcudGVzdChzdHIpOwp9"},{"version":3,"sources":["G:/RQDL/base/backend-admin/src/utils/validate.js"],"names":["isExternal","path","test","isPassword","str","length","isNumber","value","reg","isName","isIP","ip","isUrl","url","isLowerCase","isUpperCase","isAlphabets","isString","String","isArray","arg","Array","Object","prototype","toString","call","isPort","isPhone","isIdCard","isEmail","isChina","isBlank","undefined","trim","toLocaleLowerCase","isTel","isNum"],"mappings":"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","sourcesContent":["/**\r\n *\r\n * @description 判读是否为外链\r\n * @param path\r\n * @returns {boolean}\r\n */\r\nexport function isExternal(path) {\r\n  return /^(https?:|mailto:|tel:)/.test(path)\r\n}\r\n\r\n/**\r\n *\r\n * @description 校验密码是否小于6位\r\n * @param str\r\n * @returns {boolean}\r\n */\r\nexport function isPassword(str) {\r\n  return str.length >= 6\r\n}\r\n\r\n/**\r\n *\r\n * @description 判断是否为数字\r\n * @param value\r\n * @returns {boolean}\r\n */\r\nexport function isNumber(value) {\r\n  const reg = /^[0-9]*$/\r\n  return reg.test(value)\r\n}\r\n\r\n/**\r\n *\r\n * @description 判断是否是名称\r\n * @param value\r\n * @returns {boolean}\r\n */\r\nexport function isName(value) {\r\n  const reg = /^[\\u4e00-\\u9fa5a-zA-Z0-9]+$/\r\n  return reg.test(value)\r\n}\r\n\r\n/**\r\n *\r\n * @description 判断是否为IP\r\n * @param ip\r\n * @returns {boolean}\r\n */\r\nexport function isIP(ip) {\r\n  const reg = /^(\\d{1,2}|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d{1,2}|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d{1,2}|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d{1,2}|1\\d\\d|2[0-4]\\d|25[0-5])$/\r\n  return reg.test(ip)\r\n}\r\n\r\n/**\r\n *\r\n * @description 判断是否是传统网站\r\n * @param url\r\n * @returns {boolean}\r\n */\r\nexport function isUrl(url) {\r\n  const reg = /^(https?|ftp):\\/\\/([a-zA-Z0-9.-]+(:[a-zA-Z0-9.&%$-]+)*@)*((25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9][0-9]?)(\\.(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9]?[0-9])){3}|([a-zA-Z0-9-]+\\.)*[a-zA-Z0-9-]+\\.(com|edu|gov|int|mil|net|org|biz|arpa|info|name|pro|aero|coop|museum|[a-zA-Z]{2}))(:[0-9]+)*(\\/($|[a-zA-Z0-9.,?'\\\\+&%$#=~_-]+))*$/\r\n  return reg.test(url)\r\n}\r\n\r\n/**\r\n *\r\n * @description 判断是否是小写字母\r\n * @param str\r\n * @returns {boolean}\r\n */\r\nexport function isLowerCase(str) {\r\n  const reg = /^[a-z]+$/\r\n  return reg.test(str)\r\n}\r\n\r\n/**\r\n *\r\n * @description 判断是否是大写字母\r\n * @param str\r\n * @returns {boolean}\r\n */\r\nexport function isUpperCase(str) {\r\n  const reg = /^[A-Z]+$/\r\n  return reg.test(str)\r\n}\r\n\r\n/**\r\n *\r\n * @description 判断是否是大写字母开头\r\n * @param str\r\n * @returns {boolean}\r\n */\r\nexport function isAlphabets(str) {\r\n  const reg = /^[A-Za-z]+$/\r\n  return reg.test(str)\r\n}\r\n\r\n/**\r\n *\r\n * @description 判断是否是字符串\r\n * @param str\r\n * @returns {boolean}\r\n */\r\nexport function isString(str) {\r\n  return typeof str === 'string' || str instanceof String\r\n}\r\n\r\n/**\r\n *\r\n * @description 判断是否是数组\r\n * @param arg\r\n * @returns {arg is any[]|boolean}\r\n */\r\nexport function isArray(arg) {\r\n  if (typeof Array.isArray === 'undefined') {\r\n    return Object.prototype.toString.call(arg) === '[object Array]'\r\n  }\r\n  return Array.isArray(arg)\r\n}\r\n\r\n/**\r\n *\r\n * @description 判断是否是端口号\r\n * @param str\r\n * @returns {boolean}\r\n */\r\nexport function isPort(str) {\r\n  const reg = /^([0-9]|[1-9]\\d|[1-9]\\d{2}|[1-9]\\d{3}|[1-5]\\d{4}|6[0-4]\\d{3}|65[0-4]\\d{2}|655[0-2]\\d|6553[0-5])$/\r\n  return reg.test(str)\r\n}\r\n\r\n/**\r\n *\r\n * @description 判断是否是手机号\r\n * @param str\r\n * @returns {boolean}\r\n */\r\nexport function isPhone(str) {\r\n  const reg = /^1\\d{10}$/\r\n  return reg.test(str)\r\n}\r\n\r\n/**\r\n *\r\n * @description 判断是否是身份证号(第二代)\r\n * @param str\r\n * @returns {boolean}\r\n */\r\nexport function isIdCard(str) {\r\n  const reg = /^[1-9]\\d{5}(18|19|([23]\\d))\\d{2}((0[1-9])|(10|11|12))(([0-2][1-9])|10|20|30|31)\\d{3}[0-9Xx]$/\r\n  return reg.test(str)\r\n}\r\n\r\n/**\r\n *\r\n * @description 判断是否是邮箱\r\n * @param str\r\n * @returns {boolean}\r\n */\r\nexport function isEmail(str) {\r\n  const reg = /^\\w+([-+.]\\w+)*@\\w+([-.]\\w+)*\\.\\w+([-.]\\w+)*$/\r\n  return reg.test(str)\r\n}\r\n\r\n/**\r\n *\r\n * @description 判断是否中文\r\n * @param str\r\n * @returns {boolean}\r\n */\r\nexport function isChina(str) {\r\n  const reg = /^[\\u4E00-\\u9FA5]{2,4}$/\r\n  return reg.test(str)\r\n}\r\n\r\n/**\r\n *\r\n * @description 判断是否为空\r\n * @param str\r\n * @returns {boolean}\r\n */\r\nexport function isBlank(str) {\r\n  return (\r\n    str == null || undefined ||\r\n    false ||\r\n    str === '' ||\r\n    str.trim() === '' ||\r\n    str.toLocaleLowerCase().trim() === 'null'\r\n  )\r\n}\r\n\r\n/**\r\n *\r\n * @description 判断是否为固话\r\n * @param str\r\n * @returns {boolean}\r\n */\r\nexport function isTel(str) {\r\n  const reg = /^(400|800)([0-9\\\\-]{7,10})|(([0-9]{4}|[0-9]{3})(-| )?)?([0-9]{7,8})((-| |转)*([0-9]{1,4}))?$/\r\n  return reg.test(str)\r\n}\r\n\r\n/**\r\n *\r\n * @description 判断是否为数字且最多两位小数\r\n * @param str\r\n * @returns {boolean}\r\n */\r\nexport function isNum(str) {\r\n  const reg = /^\\d+(\\.\\d{1,2})?$/\r\n  return reg.test(str)\r\n}\r\n"]}]}