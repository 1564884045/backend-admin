{"remainingRequest":"G:\\RQDL\\base\\backend-admin\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!G:\\RQDL\\base\\backend-admin\\src\\components\\CascaderArea\\index.vue?vue&type=style&index=0&id=595dd2de&lang=scss&scoped=true&","dependencies":[{"path":"G:\\RQDL\\base\\backend-admin\\src\\components\\CascaderArea\\index.vue","mtime":1620715077784},{"path":"G:\\RQDL\\base\\backend-admin\\node_modules\\css-loader\\dist\\cjs.js","mtime":499162500000},{"path":"G:\\RQDL\\base\\backend-admin\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"G:\\RQDL\\base\\backend-admin\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"G:\\RQDL\\base\\backend-admin\\node_modules\\sass-loader\\dist\\cjs.js","mtime":499162500000},{"path":"G:\\RQDL\\base\\backend-admin\\node_modules\\sass-resources-loader\\lib\\loader.js","mtime":499162500000},{"path":"G:\\RQDL\\base\\backend-admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"G:\\RQDL\\base\\backend-admin\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoNCi5lbC1jYXNjYWRlciB7DQogICAgd2lkdGg6IDEwMCU7DQp9DQo="},{"version":3,"sources":["index.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoFA;AACA;AACA","file":"index.vue","sourceRoot":"src/components/CascaderArea","sourcesContent":["<template>\r\n    <el-cascader v-model=\"myValue\" :options=\"options\" :props=\"props\" :size=\"size\" :disabled=\"disabled\" clearable filterable />\r\n</template>\r\n\r\n<script>\r\nimport area from '@/util/area'\r\n\r\nexport default {\r\n    name: 'CascaderArea',\r\n    props: {\r\n        // 传入数据为中文数组，例如：['河北省', '唐山市', '市辖区']\r\n        value: {\r\n            type: Array,\r\n            default: () => []\r\n        },\r\n        size: {\r\n            type: String,\r\n            default: ''\r\n        },\r\n        disabled: {\r\n            type: Boolean,\r\n            default: false\r\n        }\r\n    },\r\n    data() {\r\n        return {\r\n            options: area,\r\n            props: {\r\n                value: 'code',\r\n                label: 'name'\r\n            }\r\n        }\r\n    },\r\n    computed: {\r\n        myValue: {\r\n            // 将中文转成 code 码\r\n            get: function() {\r\n                const myValue = []\r\n                if (this.value.length === 3) {\r\n                    const [pName, cName, aName] = this.value\r\n                    area.map(p => {\r\n                        if (p.name === pName) {\r\n                            myValue.push(p.code)\r\n                            p.children.map(c => {\r\n                                if (c.name === cName) {\r\n                                    myValue.push(c.code)\r\n                                    c.children.map(a => {\r\n                                        if (a.name === aName) {\r\n                                            myValue.push(a.code)\r\n                                        }\r\n                                    })\r\n                                }\r\n                            })\r\n                        }\r\n                    })\r\n                }\r\n                return myValue\r\n            },\r\n            // 将 code 码转成中文\r\n            set: function(value) {\r\n                let [pCode, cCode, aCode] = value\r\n                area.map(p => {\r\n                    if (p.code === pCode) {\r\n                        pCode = p.name\r\n                        p.children.map(c => {\r\n                            if (c.code === cCode) {\r\n                                cCode = c.name\r\n                                c.children.map(a => {\r\n                                    if (a.code === aCode) {\r\n                                        aCode = a.name\r\n                                    }\r\n                                })\r\n                            }\r\n                        })\r\n                    }\r\n                })\r\n                this.$emit('input', [pCode, cCode, aCode])\r\n            }\r\n        }\r\n    }\r\n}\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n.el-cascader {\r\n    width: 100%;\r\n}\r\n</style>\r\n"]}]}